Dangerous Deliveries:
  Mechanics:
    The Player can move from one point to another, where each point
    contains an Obstacle that may or may not be traversable by the player.
    The player directly controls their instantaneous velocity (not position), 
    in order to better simulate running.

    Space:
      Every point has an (x, y) position vector

    Movement:
      Pressing a movement key (8 directional) sets the instantaneous
      velocity of the Player. Pressing the wait key sets the instantaneous
      velocity of the Player to 0.

      The exception to this rule is grinding Rails, which resets the 
      Speed of the Player to align with the Rail, taking into account 
      its most recent Speed's magnitude

      Only adjacent points are traversable:
        i.e. a point p is traversable iff p_x in [x - 1, x + 1],
        p_y in [y - 1, y + 1],

    Speed 
      a 2d vector that determines how much time 
      a move from one point to another takes
      A component of a Speed vector (at one timestep) is defined by:
        Speed_i_t = Speed_i_[t-1] * speed_damp + inst_i_t clamped in (-max_speed, max_speed)
        with:
          Speed_i_t = the i'th component of a Speed vector at time t
          speed_damp = a number in (0, 1) that represents a natural
                 tendency to slow down
          inst_i = i'th component of the Player's instantaneous velocity
          max_speed = a constant

    Balance (out of date: See controller/src/player_controller.rs for 
             current computations)
      A 2d vector that represents which direction the Player is leaning.
      If this vector reaches a certain length, the Player falls over.
      A component of a Balance vector is first (later we will
      define other equations that will modify the Balance vector) 
      defined by the equation:
        Balance_i_t = Balance_i_[t-1] * balance_damp       
        with:
          balance_damp = a number in (0, 1)

      A Balance vector is modified by the equation:
        Balance_x_t += sign of (Speed_y_[t-1] - inst_y) * 
                       (2*mag(inst_v)*mag(Speed_[t-1]) - dot(inst_v, Speed_[t-1])) / 2*mag(inst_v)*mag(Speed_[t-1]) * turn_factor

        and the same for Balance_y_t with x and y switched
      in order to simulate leaning in the direction an entity was last moving if they moved orthogonally to their last speed

    Falling Over:
      sets:
        Speed = (0, 0)
        Balance = (0, 0)

    Obstacles
      Platform:
        * x y position
        * height 
      Rail: CURRENTLY UNUSED 
        * x y position
        * height
        * +/- x y direction (normal vectors)
        * moving onto the rail "grinds" the rail,
          * moves the Player along the rail, dampening the other
            axes of their Speed
        * while grinding the rail
          * if the Player grinded the rail upwards, i.e. the player's height has increased
            since grinding the rail, then the player falls over to whichever side their Balance
            vector is most aligned with
          * if a player's speed reaches (0, 0) they fall off the rail
        Pit: CURRENTLY UNUSED 
          * x y position
          * falling into a pit is game over

    Chat
      The player can chat with other entities they are adjacent to
      1. When a player is alone, they print a random message to the screen 
      2. When a player is adjacent to another entity, a helpful message about the direction of the 
         goal is printed to the screen

    Score
      A function that maps the amount of time the delivery took to a number
        (table_width * table_height) / delivery_time

    Goals
      Job
        * fixed position, spawns one at a time
        * upon reaching a Job, the player is then
          given a Recipient
        * the Job is removed when the player reaches it
      Recipient
        * moving entity, is assigned to a Job before the player
          reaches a Job
        * after the player reaches a Job they can Chat with a Recipient
          to add to their Score, which spawns a new Job/Recipient pair 
      